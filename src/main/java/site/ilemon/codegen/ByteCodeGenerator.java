package site.ilemon.codegen;


import java.io.IOException;

import site.ilemon.ast.forcodegen.*;
import site.ilemon.visitor.*;

/**
 * 
 * @author andy
 *
 */
public class ByteCodeGenerator implements IGeneratorCodeVistor
{
	String className;
	private java.io.BufferedWriter writer;

	private void writeln(String s){
		write(s + "\n");
	}

	private void write(String s){
		try
		{
			this.writer.write(s);
		} catch (IOException e)
		{
			e.printStackTrace();
			System.exit(1);
		}
	}

	private void iwriteln(String s){
		write("    " + s + "\n");
	}

	@Override
	public void visit(Declare obj) {
		// TODO Auto-generated method stub

	}

	@Override
	public void visit(Iadd obj) {
		this.iwriteln("iadd");
	}
	
	@Override
	public void visit(Imul obj) {
		this.iwriteln("imul");
	}

	@Override
	public void visit(Idiv obj) {
		this.iwriteln("idiv");
	}

	@Override
	public void visit(Iload obj) {
		this.iwriteln("iload " + obj.index);
	}

	@Override
	public void visit(Int obj) {
		
	}

	@Override
	public void visit(Invokestatic obj) {
		this.write("    invokestatic " + className + "/" + obj.name + "(");
		
		for( int i = 0; i< obj.at.size(); i++){
			if( obj.at.get(i) instanceof Int){
				this.write("I");
			}else{
				this.write("F");
			}
		}
		if( obj.rt != null && obj.rt.toString().equals("@float"))
			this.write(")F");
		else
			this.write(")I");
        //this.visit(s.rt);
        this.writeln("");
	}

	@Override
	public void visit(Ireturn obj) {
		this.iwriteln("ireturn");
	}

	@Override
	public void visit(Isub obj) {
		this.iwriteln("isub");
	}

	@Override
	public void visit(Ldc obj) {
		this.iwriteln("ldc " + obj.i);
	}

	@Override
	public void visit(MainClass obj) {
		try
		{
			this.className = obj.name;
			this.writer = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
					new java.io.FileOutputStream(obj.name + ".il")));
		} catch (Exception e)
		{
			e.printStackTrace();
			System.exit(1);
		}

		this.writeln("; This file is automatically generated by the compiler");
		this.writeln("; Do Not Modify!\n");
		this.writeln(".class public " + obj.name);
		this.writeln(".super java/lang/Object");
		for(Method method : obj.methods){
			this.visit(method);
		}


		try
		{
			this.writer.close();
		} catch (IOException e)
		{
			e.printStackTrace();
			System.exit(1);
		}
	}

	@Override
	public void visit(Method obj) {
		if( obj.name.equals("main")){
			this.writeln(".method public static main([Ljava/lang/String;)V");
			this.writeln(".limit stack 4096");
			this.writeln(".limit locals 2000");
			for (Stmt stmt : obj.stms) {
				this.visit(stmt);
			}
			this.writeln("return");
		}else{
			
			if( obj.formals !=null && obj.formals.size() > 0 ){
				this.write(".method static " + obj.name + "(");
				for( int i = 0; i< obj.formals.size(); i++){
					if( obj.formals.get(i).type instanceof Int)
						this.write("I");
					else
						this.write("F");
				}
				if(obj.retType instanceof Int)
					this.write(")I");
				else
					this.write(")F");
			}else{
				if(obj.retType instanceof Int)
					this.write(".method static " + obj.name + "()I");
				else
					this.write(".method static " + obj.name + "()F");
				
			}
			this.writeln("");
			this.writeln(".limit stack 4096");
			//this.writeln(".limit locals " + (obj.index + 3));// 此处有点小问题
			this.writeln(".limit locals 1000");// 此处有点小问题
			for (Stmt stmt : obj.stms) {
				this.visit(stmt);
			}
		}
		this.writeln(".end method");
	}

	@Override
	public void visit(Stmt obj) {
		if( obj instanceof Iadd )
			this.visit((Iadd)obj);
		else if( obj instanceof Fadd )
			this.visit((Fadd)obj);
		else if( obj instanceof Iload )
			this.visit((Iload)obj);
		else if( obj instanceof Fload )
			this.visit((Fload)obj);
		else if( obj instanceof Istore )
			this.visit((Istore)obj);
		else if( obj instanceof Fstore )
			this.visit((Fstore)obj);
		else if( obj instanceof Isub )
			this.visit((Isub)obj);
		else if( obj instanceof Fsub )
			this.visit((Fsub)obj);
		else if( obj instanceof Imul )
			this.visit((Imul)obj);
		else if( obj instanceof Fmul )
			this.visit((Fmul)obj);
		else if( obj instanceof Idiv )
			this.visit((Idiv)obj);
		else if( obj instanceof Fdiv )
			this.visit((Fdiv)obj);
		else if( obj instanceof Ireturn )
			this.visit((Ireturn)obj);
		else if( obj instanceof Freturn )
			this.visit((Freturn)obj);
		else if( obj instanceof Ldc )
			this.visit((Ldc)obj);
		else if( obj instanceof Invokestatic)
			this.visit((Invokestatic)obj);
		else if( obj instanceof Printf)
			this.visit((Printf)obj);
		else if( obj instanceof PrintNewLine)
			this.visit((PrintNewLine)obj);
		else if( obj instanceof Aload )
			this.visit((Aload)obj);
		else if( obj instanceof Astore )
			this.visit((Astore)obj);
		else if( obj instanceof Ificmplt )
			this.visit((Ificmplt)obj);
		else if( obj instanceof Ificmpgt )
			this.visit((Ificmpgt)obj);
		else if( obj instanceof LabelJ )
			this.visit((LabelJ)obj);
		else if( obj instanceof GoTo )
			this.visit((GoTo)obj);
		
	}

	@Override
	public void visit(Type obj) {

	}
	
	public void visit(Istore obj){
		this.iwriteln("istore " + obj.index);
	}

	@Override
	public void visit(Printf obj) {
		if( obj.exprType.toString().equals("@int")){
			this.iwriteln("getstatic java/lang/System/out Ljava/io/PrintStream;");
			this.iwriteln("swap");
			this.iwriteln("invokevirtual java/io/PrintStream/print(I)V");
		}
		else if( obj.exprType.toString().equals("@float")){
			this.iwriteln("getstatic java/lang/System/out Ljava/io/PrintStream;");
			this.iwriteln("swap");
			this.iwriteln("invokevirtual java/io/PrintStream/print(F)V");
		}
	}

	@Override
	public void visit(Aload obj) {
		this.iwriteln("aload " + obj.index);
		this.iwriteln("getstatic java/lang/System/out Ljava/io/PrintStream;");
		this.iwriteln("swap");
		this.iwriteln("invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V");
	}

	@Override
	public void visit(Astore obj) {
		this.iwriteln("astore " + obj.index);
	}

	@Override
	public void visit(Ificmplt obj) {
		this.iwriteln("if_icmplt " + obj.l.toString());
	}
	
	@Override
	public void visit(Ificmpgt obj) {
		this.iwriteln("if_icmpgt " + obj.l.toString());
	}

	@Override
	public void visit(GoTo obj) {
		 this.iwriteln("goto " + obj.l.toString());
	}

	@Override
	public void visit(LabelJ obj) {
		 this.writeln(obj.label.toString() + ":");
	}

	@Override
	public void visit(PrintNewLine obj) {
		this.iwriteln("ldc \"\\n\"");
		this.iwriteln("astore 100 ");
		this.iwriteln("aload 100 ");
		this.iwriteln("getstatic java/lang/System/out Ljava/io/PrintStream;");
		this.iwriteln("swap");
		this.iwriteln("invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V");
	}

	@Override
	public void visit(Fadd obj) {
		this.iwriteln("fadd");
	}

	@Override
	public void visit(Fsub obj) {
		this.iwriteln("fsub");
	}

	@Override
	public void visit(Fmul obj) {
		this.iwriteln("fmul");		
	}

	@Override
	public void visit(Fdiv obj) {
		this.iwriteln("fdiv");
	}

	@Override
	public void visit(Fload obj) {
		this.iwriteln("fload " + obj.index);
	}

	@Override
	public void visit(Fstore obj) {
		this.iwriteln("fstore " + obj.index);
	}

	@Override
	public void visit(Freturn obj) {
		this.iwriteln("freturn");
	}

}
